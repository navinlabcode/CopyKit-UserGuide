[["index.html", "CopyKit User Guide 1 Introduction", " CopyKit User Guide Darlan Conterno Minussi Last revised: 2021-08-06 1 Introduction This is the user guide for the CopyKit package. CopyKit is a toolkit for single-cell analysis of copy number datasets. Copykit expands from the existing robust scaffold for single-cell analysis provided by the Bioconductor packages SingleCellExperiment and SummarizedExperiment and, provides the tools to perform binning of sequencing reads, segmentation as well as quality control and downstream analysis of scDNA-Seq datasets. CopyKit uses the Variable Binning (Baslan et al. 2012; Gao et al. 2016) pipeline to process datasets. All the information from a scDNA-Seq dataset is stored within the scCNA object for downstream analysis. CopyKit functions can be split into 4 modules: 1) Pre-processing, 2) Quality Control, 3) Analysis and, 4) Visualization module. The next chapters of this user guide will cover each module in detail. "],["parallelization.html", "2 Parallelization", " 2 Parallelization For all parallel calculations, CopyKit adopts the BiocParallel framework. Make sure to read the BiocParallel vignette to choose the best parameters for your machine. An example workflow can be done as follows: We use BiocParallel::register() function to register the number of workers desired. library(BiocParallel) register(MulticoreParam(workers = 100, progressbar = T), default = T) BiocParallel registered 100 processes for parallelization of copykit functions. The default parameter can be confirmed with: BiocParallel::bpparam() ## class: MulticoreParam ## bpisup: FALSE; bpnworkers: 100; bptasks: 0; bpjobname: BPJOB ## bplog: FALSE; bpthreshold: INFO; bpstopOnError: TRUE ## bpRNGseed: ; bptimeout: 2592000; bpprogressbar: FALSE ## bpexportglobals: TRUE ## bplogdir: NA ## bpresultdir: NA ## cluster type: FORK The argument progressbar allows for a helpful progression bar while the process is being run. After this setup CopyKit parallelized functions will automatically recognize these parameters and run in parallel. It is highly recommended to run CopyKit using parallelization since some functions can take a long time to run otherwise. "],["quick-start.html", "3 Quick-Start", " 3 Quick-Start This section provides a basic workflow with CopyKit. Detailed description of CopyKit functions is provided in the following sections. # Run pre-processing module tumor &lt;- runVarbin(&quot;/path/to/marked/bam/files/&quot;, remove_Y = TRUE) # Mark normal cells if they exist tumor &lt;- findNormalCells(tumor) # Filter cells tumor &lt;- filterCells(tumor) # Visualize the result from filtering and cells marked as diploid plotHeatmap(tumor, label = c(&#39;filtered&#39;, &#39;is_normal&#39;), row_split = &#39;filtered&#39;) # Remove cells marked as normal or noise cells from the copykit object tumor &lt;- tumor[,SummarizedExperiment::colData(tumor)$filtered == &quot;kept&quot;] tumor &lt;- tumor[,SummarizedExperiment::colData(tumor)$is_normal == FALSE] # Create a umap embedding tumor &lt;- runUmap(tumor) # Search for the best K value for clustering of subclones # according to jaccard similarity and plot the results tumor &lt;- findSuggestedK(tumor) plotSuggestedK(tumor) # Find clusters and plot the results tumor &lt;- findClusters(tumor) plotUmap(tumor, label = &#39;subclones&#39;) # Plot a Copy Number Heatmap with clustering annotation plotHeatmap(tumor, label = &#39;subclones&#39;) "],["pre-processing.html", "4 Pre-processing 4.1 runVarbin()", " 4 Pre-processing CopyKit pre-processing module consists of 1 function that performs 3 main processes: Counts reads from the from the .bam files Applies a variance stabilization transformation to the dataset Segments the data into piece-wise constant function for inference of copy number states 4.1 runVarbin() First we load CopyKit with the library() function library(copykit) NOTE: CopyKit functions will automatically run in parallel if the BiocParallel framework was registered. For more information check section 2. runVarbin() accepts duplicates marked .bam files as input and performs the binning of reads into bins according to the variable binning pipeline (Baslan et al. 2012; Gao et al. 2016). To help users obtain these processed files from .fastq files a snakemake pipeline is available here that uses bowtie2 for the alignment of reads and sambamba for the removal of pcr duplicates. This pipeline can be adapted as per users’ needs and the only requirement for CopyKit is the use of .bam files as the input. runVarbin() the first argument should be the path to the .bam files location. tumor &lt;- runVarbin(&quot;~/path/to/bam/files/&quot;, remove_Y = TRUE) ## Counting reads. ## Performing GC correction. ## Smoothing bin counts. ## Running segmentation algorithm: CBS for genome hg38 ## Merging levels. ## Done. runVarbin() by default uses a varbin pipeline scaffold for the genome hg38 with a resolution of bins with an average size of 200kb. Both options can be changed with the arguments genome or resolution. For samples that are XX, runVarbin() can be set to ignore any read that may have aligned to chrY with the argument remove_Y = TRUE. A consequence of the count nature of copy-number sequencing data is a negative binomial distribution with overdispersion at higher counts. To account for that CopyKit offers a variance stabilization transformation procedure with the function runVst(). By default, CopyKit will apply the freeman-tukey transformation to the bin count dataset. The resulting object is the CopyKit object of class scCNA that can be inspected. tumor ## class: scCNA ## dim: 10327 1536 ## metadata(2): genome vst ## assays(6): segment_ratios ratios ... smoothed_bincounts logr ## rownames(10327): 1 2 ... 10326 10327 ## rowData names(5): abspos bin_length mappable_positions gc_content arm ## colnames(1536): PMTC6LiverC100DL1S2_S100_L001_R1_001 ## PMTC6LiverC100DL1S6_S484_L002_R1_001 ... PMTC6LiverC9DL3S1_S777_L003_R1_001 ## PMTC6LiverC9DL6L7S1_S1161_L004_R1_001 ## colData names(9): sample reads_assigned_bins ... reads_total percentage_duplicates ## reducedDimNames(0): ## mainExpName: NULL ## altExpNames(0): ## rowRanges has: 10327 ranges ## Phylo: Phylogenetic tree with 0 tips and nodes ## consensus dim: 0 0 CopyKit objects expand on the SingleCellExperiment class where each column represents a single-cell and each row represents a bin. The information of the bincounts resulting from runVarbin() are stored withing the bin_counts slot that can be acessed with the bin_counts() accessor. (Here displaying the first five columns). head(bin_counts(tumor)[,1:5]) ## PMTC6LiverC100DL1S2_S100_L001_R1_001 PMTC6LiverC100DL1S6_S484_L002_R1_001 ## 1 33.14764 10.236551 ## 2 28.87788 11.717544 ## 3 30.53296 6.005966 ## 4 28.87125 10.932743 ## 5 38.18502 10.578785 ## 6 32.25772 9.861671 ## PMTC6LiverC100DL4L5S1_S868_L003_R1_001 PMTC6LiverC100DL6L7S3_S1252_L004_R1_001 ## 1 44.83653 42.96656 ## 2 37.44255 41.45670 ## 3 47.33517 47.27014 ## 4 41.01801 45.70836 ## 5 43.67812 46.45374 ## 6 37.29713 38.60818 ## PMTC6LiverC101DL1S2_S101_L001_R1_001 ## 1 41.69094 ## 2 30.76051 ## 3 44.16830 ## 4 34.27968 ## 5 32.27182 ## 6 47.18439 Classically copy number data has been transformed with a logarithm transformation, the log transformation can be set within CopyKit with the argument runVst(copykit_object, transformation = 'log). Warning The segmentation step (see next section) can be very slow when transformation = ‘log’ is selected. Even though the process is fast for most cells it can hang in a few cells with large breakpoint numbers and take ~ 1hr to complete. The resulting transformation is stored within the CopyKit object in the ft slot if freeman-tukey was performed and can be accessed with the assay() function: head(assay(tumor, &#39;ft&#39;)[,1:5]) ## PMTC6LiverC100DL1S2_S100_L001_R1_001 PMTC6LiverC100DL1S6_S484_L002_R1_001 ## 1 11.60100 6.551558 ## 2 10.83988 6.989256 ## 3 11.14108 5.097586 ## 4 10.83866 6.760850 ## 5 12.43920 6.655266 ## 6 11.44654 6.436035 ## PMTC6LiverC100DL4L5S1_S868_L003_R1_001 PMTC6LiverC100DL6L7S3_S1252_L004_R1_001 ## 1 13.46628 13.18562 ## 2 12.31924 12.95457 ## 3 13.83241 13.82300 ## 4 12.88666 13.59515 ## 5 13.29311 13.70437 ## 6 12.29561 12.50705 ## PMTC6LiverC101DL1S2_S101_L001_R1_001 ## 1 12.99068 ## 2 11.18186 ## 3 13.36666 ## 4 11.79456 ## 5 11.44900 ## 6 13.81059 Lastly segmentation fits piece-wise constant functions to every profile generating segment means that can be used to infer copy-number states across every cell. By default, CopyKit applies Circular Binary Segmentation (CBS) from the DNAcopy package to perform segmentation of every chromosomal arm. The resulting information from runSegmentation() is stored within the CopyKit object into two different assays: ratios and segment_ratios, which can be accessed with the helper function ratios() and segment_ratios() head(ratios(tumor)[,1:5]) ## PMTC6LiverC100DL1S2_S100_L001_R1_001 PMTC6LiverC100DL1S6_S484_L002_R1_001 ## 1 1.0268418 0.9037346 ## 2 0.8945741 1.0344841 ## 3 0.9458446 0.5302371 ## 4 0.8943686 0.9651979 ## 5 1.1828889 0.9339487 ## 6 0.9992741 0.8706382 ## PMTC6LiverC100DL4L5S1_S868_L003_R1_001 PMTC6LiverC100DL6L7S3_S1252_L004_R1_001 ## 1 0.9471118 1.0355269 ## 2 0.7909237 0.9991381 ## 3 0.9998921 1.1392464 ## 4 0.8664506 1.1016065 ## 5 0.9226419 1.1195707 ## 6 0.7878521 0.9304866 ## PMTC6LiverC101DL1S2_S101_L001_R1_001 ## 1 1.1169724 ## 2 0.8241273 ## 3 1.1833451 ## 4 0.9184119 ## 5 0.8646177 ## 6 1.2641514 head(segment_ratios(tumor)[,1:5]) ## PMTC6LiverC100DL1S2_S100_L001_R1_001 PMTC6LiverC100DL1S6_S484_L002_R1_001 ## 1 1 0.9857904 ## 2 1 0.9857904 ## 3 1 0.9857904 ## 4 1 0.9857904 ## 5 1 0.9857904 ## 6 1 0.9857904 ## PMTC6LiverC100DL4L5S1_S868_L003_R1_001 PMTC6LiverC100DL6L7S3_S1252_L004_R1_001 ## 1 0.9966125 1.028728 ## 2 0.9966125 1.028728 ## 3 0.9966125 1.028728 ## 4 0.9966125 1.028728 ## 5 0.9966125 1.028728 ## 6 0.9966125 1.028728 ## PMTC6LiverC101DL1S2_S101_L001_R1_001 ## 1 1 ## 2 1 ## 3 1 ## 4 1 ## 5 1 ## 6 1 From now on, the derived segment ratios will be the main type of data where the copy number analysis will be performed. "],["qc-module.html", "5 QC module 5.1 runMetrics() 5.2 findNormalCells() 5.3 filterCells()", " 5 QC module CopyKit QC Module consists of 3 main functions: 1) runMetrics(), 2) filterCells() and 3) findNormalCells(). 5.1 runMetrics() runMetrics() is used to add basic quality control information to the metadata of the CopyKit object. It will return information on the overdispersion on the datasets and the number of breakpoints for each single-cell. tumor &lt;- runMetrics(tumor) ## Calculating overdispersion. ## Counting breakpoints. ## Done. The resulting information can be seen at the metadata with: colData(tumor) ## DataFrame with 1536 rows and 11 columns ## sample reads_assigned_bins reads_unmapped ## &lt;character&gt; &lt;integer&gt; &lt;integer&gt; ## PMTC6LiverC100DL1S2_S100_L001_R1_001 PMTC6LiverC100DL1S2_.. 332392 30250 ## PMTC6LiverC100DL1S6_S484_L002_R1_001 PMTC6LiverC100DL1S6_.. 119182 22260 ## PMTC6LiverC100DL4L5S1_S868_L003_R1_001 PMTC6LiverC100DL4L5S.. 491387 30942 ## PMTC6LiverC100DL6L7S3_S1252_L004_R1_001 PMTC6LiverC100DL6L7S.. 428159 28239 ## PMTC6LiverC101DL1S2_S101_L001_R1_001 PMTC6LiverC101DL1S2_.. 388366 28756 ## ... ... ... ... ## PMTC6LiverC99DL6L7S3_S1251_L004_R1_001 PMTC6LiverC99DL6L7S3.. 280511 28090 ## PMTC6LiverC9DL1S1_S9_L001_R1_001 PMTC6LiverC9DL1S1_S9.. 250902 38326 ## PMTC6LiverC9DL1S5_S393_L002_R1_001 PMTC6LiverC9DL1S5_S3.. 425355 34111 ## PMTC6LiverC9DL3S1_S777_L003_R1_001 PMTC6LiverC9DL3S1_S7.. 95197 10608 ## PMTC6LiverC9DL6L7S1_S1161_L004_R1_001 PMTC6LiverC9DL6L7S1_.. 307544 38814 ## reads_duplicates reads_multimapped reads_unassigned ## &lt;integer&gt; &lt;integer&gt; &lt;integer&gt; ## PMTC6LiverC100DL1S2_S100_L001_R1_001 34883 0 105841 ## PMTC6LiverC100DL1S6_S484_L002_R1_001 12657 0 40033 ## PMTC6LiverC100DL4L5S1_S868_L003_R1_001 58222 0 154981 ## PMTC6LiverC100DL6L7S3_S1252_L004_R1_001 53055 0 137403 ## PMTC6LiverC101DL1S2_S101_L001_R1_001 43008 0 123087 ## ... ... ... ... ## PMTC6LiverC99DL6L7S3_S1251_L004_R1_001 36534 0 90846 ## PMTC6LiverC9DL1S1_S9_L001_R1_001 25527 0 82617 ## PMTC6LiverC9DL1S5_S393_L002_R1_001 48055 0 135815 ## PMTC6LiverC9DL3S1_S777_L003_R1_001 9867 0 29869 ## PMTC6LiverC9DL6L7S1_S1161_L004_R1_001 37898 0 101012 ## reads_ambiguous reads_total percentage_duplicates ## &lt;integer&gt; &lt;numeric&gt; &lt;numeric&gt; ## PMTC6LiverC100DL1S2_S100_L001_R1_001 77 503443 0.07 ## PMTC6LiverC100DL1S6_S484_L002_R1_001 33 194165 0.07 ## PMTC6LiverC100DL4L5S1_S868_L003_R1_001 104 735636 0.08 ## PMTC6LiverC100DL6L7S3_S1252_L004_R1_001 91 646947 0.08 ## PMTC6LiverC101DL1S2_S101_L001_R1_001 63 583280 0.07 ## ... ... ... ... ## PMTC6LiverC99DL6L7S3_S1251_L004_R1_001 51 436032 0.08 ## PMTC6LiverC9DL1S1_S9_L001_R1_001 44 397416 0.06 ## PMTC6LiverC9DL1S5_S393_L002_R1_001 66 643402 0.07 ## PMTC6LiverC9DL3S1_S777_L003_R1_001 16 145557 0.07 ## PMTC6LiverC9DL6L7S1_S1161_L004_R1_001 61 485329 0.08 ## overdispersion breakpoint_count ## &lt;numeric&gt; &lt;numeric&gt; ## PMTC6LiverC100DL1S2_S100_L001_R1_001 0.00226051 0 ## PMTC6LiverC100DL1S6_S484_L002_R1_001 0.01748283 3 ## PMTC6LiverC100DL4L5S1_S868_L003_R1_001 0.00307386 2 ## PMTC6LiverC100DL6L7S3_S1252_L004_R1_001 0.00332806 0 ## PMTC6LiverC101DL1S2_S101_L001_R1_001 0.00566675 0 ## ... ... ... ## PMTC6LiverC99DL6L7S3_S1251_L004_R1_001 0.00306482 8 ## PMTC6LiverC9DL1S1_S9_L001_R1_001 0.00528269 4 ## PMTC6LiverC9DL1S5_S393_L002_R1_001 0.00170965 0 ## PMTC6LiverC9DL3S1_S777_L003_R1_001 0.03194835 48 ## PMTC6LiverC9DL6L7S1_S1161_L004_R1_001 0.00399331 12 5.2 findNormalCells() It is common for datasets to contain normal cells with flat profiles mixed in with the aneuploidy cells from a tumor that is being profiled. findNormalCells() performs a sample-wise calculation of the segment ratios coefficient of variation. By default findNormalCells() tries to automatically identify the resolution threshold by fitting a normal mixture model to the distribution of coefficient of variation from all samples. To increase the sensitivity of the model, findNormalCells also simulate the expected coefficient of variation. Lastly, findNormalCells() add the resulting information to the metadata of the CopyKit object in a column named ‘is_normal.’ tumor &lt;- findNormalCells(tumor) ## number of iterations= 21 ## Copykit detected 622 that are possibly normal cells using a resolution of: 0.086 ## Done. Information was added to metadata column &#39;is_normal&#39;. plotHeatmap() can again be used to visualize the results from findNormalCells() plotHeatmap(tumor, label = &#39;is_normal&#39;, row_split = &#39;is_normal&#39;) ## Ordering by consensus requires cluster information. ## Switching to hclust ## No distance matrix detected in the scCNA object. ## Calculating distance matrix with metric: euclidean ## Using 48 cores. ## Access distance matrix with copykit::distMat() ## Done. ## Plotting Heatmap. The object can be subsetted in the same way as any R object is subsetted. tumor &lt;- tumor[,colData(tumor)$is_normal == FALSE] 5.3 filterCells() filterCells() removes low-quality cells according to a defined resolution threshold. Cells with correlation smaller than the mean of its k-nearest neighbors are defined as noisy samples and this information, as well as the correlation value, is added to the scCNA object metadata. tumor &lt;- filterCells(tumor) ## Calculating correlation matrix. ## Adding information to metadata. Access with colData(scCNA). ## Done. The default resolution threshold is 0.9 and it can be adjusted accordingly to user needs with the argument ‘resolution.’ filterCells() adds a column to the metadata called ‘filtered’ marking cells that should be removed or kept. After filtering the function plotHeatmap() from the visualization module can be used to visualize the results from filterCells() with the argument label set to ‘filtered.’ To make visualization easier, rows can also be split according to elements of the metadata with the argument row_split. plotHeatmap(tumor, label = &#39;filtered&#39;, row_split = &#39;filtered&#39;) ## Ordering by consensus requires cluster information. ## Switching to hclust ## No distance matrix detected in the scCNA object. ## Calculating distance matrix with metric: euclidean ## Using 48 cores. ## Access distance matrix with copykit::distMat() ## Done. ## Plotting Heatmap. If satisfied with the filtering results we remove the noise cells from the object. tumor &lt;- tumor[,colData(tumor)$filtered == &#39;kept&#39;] Your dataset should be ready to proceed with the analysis. "],["analysis-and-visualization-module.html", "6 Analysis and Visualization module 6.1 plotMetrics() 6.2 plotRatio() 6.3 runUmap() 6.4 plotUmap() 6.5 Clustering 6.6 runPhylo() 6.7 plotPhylo() 6.8 calcInteger() 6.9 plotHeatmap() 6.10 calcConsensus() 6.11 plotConsensusLine() 6.12 plotGeneCopy()", " 6 Analysis and Visualization module The analysis and visualization module from CopyKit work in synergy to help you analyze and assess the results from your day. The analysis module provides the following functions: runUmap(), calcInteger(), findSuggestedK(), findClusters(), calcConsensus() and runPhylo(). The visualization module functions are: plotMetrics(), plotRatio(), plotUmap(), plotHeatmap(), plotConsensusLine() and plotGeneCopy(). 6.1 plotMetrics() plotMetrics() can be used to plot any information available in the `colData(). As a reminder, we can check the elements within coldata() with: names(colData(tumor)) ## [1] &quot;sample&quot; &quot;reads_assigned_bins&quot; &quot;reads_unmapped&quot; ## [4] &quot;reads_duplicates&quot; &quot;reads_multimapped&quot; &quot;reads_unassigned&quot; ## [7] &quot;reads_ambiguous&quot; &quot;reads_total&quot; &quot;percentage_duplicates&quot; ## [10] &quot;overdispersion&quot; &quot;breakpoint_count&quot; &quot;is_normal&quot; ## [13] &quot;find_normal_cv&quot; &quot;filter_corr_value&quot; &quot;filtered&quot; plotMetrics() argument metric defines which information to plot. whereas the argument label, if supplied, will color the plot based on that information. plotMetrics(tumor, metric = c(&quot;overdispersion&quot;, &quot;breakpoint_count&quot;, &quot;reads_total&quot;, &quot;reads_duplicates&quot;, &quot;reads_assigned_bins&quot;, &quot;percentage_duplicates&quot;), label = &quot;overdispersion&quot;) ## Coloring by: overdispersion 6.2 plotRatio() It is often important to visualize that the segmentation behaved as expected and closely follows the ratios. Not missing important events. Ratio plots are a great tool for this. You can plot ratio plots with the plotRatio() function. plotRatio() has two different modes. When the input is the CopyKit object an interactive app will run and you can select which cell will be visualized. plotRatio(tumor) If plotRatio() is given a sample name only the plot for that cell will be shown. plotRatio(tumor, &quot;PMTC6LiverC117AL4L5S1_S885_L003_R1_001&quot;) 6.3 runUmap() runUmap uses generates a UMAP reduced dimensions embedding, the resulting embedding is stored within the scCNA reducedDim slot and is an important pre-processing step to the findClusters feature. tumor &lt;- runUmap(tumor) ## Using assay: logr ## Embedding data with UMAP. Using seed 17 ## Access reduced dimensions slot with: SingleCellExperiment::reducedDim(scCNA, &#39;umap&#39;). ## Done. Additional arguments to control umap parameters can be passed on torunUmap() with the ‘…’ argument. tumor &lt;- runUmap(tumor, n_neighbors = 30, min_dist = 0) ## Using assay: logr ## Embedding data with UMAP. Using seed 17 ## Access reduced dimensions slot with: SingleCellExperiment::reducedDim(scCNA, &#39;umap&#39;). ## Done. 6.4 plotUmap() plotUmap() can be used to plot the reduced dimensional embedding. plotUmap can be colored by any element of the metadata with the argument ‘label,’ this will be shown in a later section. plotUmap(tumor) ## Plotting Umap. 6.5 Clustering findClusters uses the reduced dimensional embedding resulting from runUmap() to perform clustering at two levels, hereby referred to as superclones and subclones. When clustering for superclones, findClusters() creates a graph representation of the reduced dimension embedding using a shared nearest neighbor algorithm (SNN), from this graph the connected components are extracted and generally represent high-level structures that share large, lineage defining copy number events. At a more fine-grained resolution, CopyKit can also be used to detect subclones, i. e. groups of cells containing more exclusive copy number event per cluster. To do so, the umap embedding is again used as the pre-processing step, this time to perform a density-based clustering with hdbscan hdbscan. The findClusters() function will use the reduced dimensional embedding resulting from runUmap() to perform clustering of superclones and subclones. When clustering for superclones findClusters() creates a graph representation of the dataset reduced dimension embedding using a shared nearest neighbor algorithm (SNN), from this graph the connected components are extracted and generally represent high-level structures that share large, lineage defining copy number events. CopyKit can also be used to detect subclones, i. e. groups of cells containing a unique copy number event per cluster, to do so the umap embedding is again used as the pre-processing step, this time to perform a density-based clustering with hdbscan previously applied in different copy number analysis, as seen, in the work from Laks et al. (RN6?). Network clustering algorithms can also be used to detect subclones. By setting the argument method to leiden CopyKit will again use the SNN representation of the reduced dimensional embedding to apply the graph based clustering. 6.5.1 findSugestedK() Density-based clustering requires the input of the k neighbors, frequently chosen ad hoc. To help with parametrization, CopyKit provides the helper findSuggestedK function. findSuggestedK performs a clustering bootstrapping over a range of k values and returns the value that maximizes the jaccard similarity, by default the metric being maximized is mean, however, it is also possible to maximize the median with the argument metric. While findSuggestedK does not guarantee that the suggested value will result in optimal clustering but provides a guide that maximizes cluster stability. tumor &lt;- findSuggestedK(tumor) ## Calculating jaccard similarity for k range: 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 ## ## Suggested k = 15 with mean jaccard similarity of: 0.992 CopyKit provides different ways to inspect the results from findSuggestedK() with plotSuggestedK(). The default geom plots a boxplot showing the mean values of each k assessed during the grid search as the red point inside each boxplot plotSuggestedK(tumor) if the argument geom is set to tile, plotSuggestedK() plots a heatmap where each row is a detected subclone, each column is a k assessed during the grid search and the color represents the jaccard similarity for a given clone. Clones not detected in a given k are presented in the color gray. plotSuggestedK(tumor, geom = &#39;tile&#39;) It is also possible to visualize the relation between subclone sizes with the jaccard similarity setting geom to scatterplot plotSuggestedK(tumor, geom = &#39;scatterplot&#39;) ## `geom_smooth()` using formula &#39;y ~ x&#39; The suggested value is stored into the metadata and can be accessed at: S4Vectors::metadata(tumor)$suggestedK ## [1] 15 6.5.2 findClusters() To run findClusters() simply use the function in the CopyKit object and provide the k value with the arguments ‘k_superclones’ and ‘k_subclones.’ NOTE: k_superclones and k_subclones can be used concurrently. Only k_subclones is a mandatory field. By default, findClusters() will use the hdbscan method for clustering tumor &lt;- findClusters(tumor, k_superclones = 30, k_subclones = 15) If findSuggestedK() was used and the argument ‘k_subclones’ is not provided, findClusters() will automatically use the value resulting from findSuggestedK() that was stored into the metadata: tumor &lt;- findClusters(tumor) ## Using suggested k_subclones = 15 ## Finding clusters, using method: hdbscan ## Found 4 subclones. ## 0 cells were classified as outliers. Check subclone group &#39;c0&#39;. ## Done. If the method used for clustering was hdbscan, it is possible that a subgroup of outliers is identified, those are added to subgroup c0 and may be removed by subsetting the copykit object. Copykit will inform if any cell was classified as c0 in an informative message after running findClusters() tumor &lt;- tumor[,colData(tumor)$subclones != &#39;c0&#39;] The results from the clustering can be visualized with different plotting functions. For example plotUmap() can be used with the argument ‘label’: plotUmap(tumor, label = &#39;subclones&#39;) ## Plotting Umap. ## Coloring by: subclones. 6.6 runPhylo() CopyKit can store phylogenetic trees inside the scCNA object. To run a phylogenetic tree simply use the function runPhylo(). The resulting tree is stored within the scCNA object in the phylo slot: tumor &lt;- runPhylo(tumor, metric = &#39;manhattan&#39;) ## Using ratio data... ## Calculating distance matrix ## Creating neighbor-joining tree. ## Access slot with copykit::phylo(scCNA). ## Done. 6.7 plotPhylo() Resulting phylogenetic trees from runPhylo() can be plotted with the function plotPhylo() plotPhylo(tumor) plotPhylo() can use any element of the metadata to color the leaves of the tree plotPhylo(tumor, label = &#39;subclones&#39;) 6.8 calcInteger() Segment mean ratios can be scaled to integer values, this process of ploidy scaling is accomplished within CopyKit with calcInteger(). CopyKit supports different methods of calculating integer copy number profiles. To calculate computational ploidies CopyKit adopts the scquantum package. To use scquantum just set the argument method to scquantum. tumor &lt;- calcInteger(tumor, method = &#39;scquantum&#39;) By setting the argument method to fixed, a fixed value of ploidy (generally determined using Flow Cytometry) will scale all cells. tumor &lt;- calcInteger(tumor, ploidy_value = 4.26) ## Scaling ratio values by ploidy value 4.26 Alternatively, if different ploidies are needed for different cells, a vector containing the ploidies can be passed on to calcInteger() as long as it contains the same length and sample order as colData() The integer segment mean ratios are stored in the slot integer that can be accessed with the function assay() If a value of ploidy exists, plotRatio() will use it to plot the integer copy number values as a secondary axis. plotRatio(tumor, &quot;PMTC6LiverC117AL4L5S1_S885_L003_R1_001&quot;) 6.9 plotHeatmap() A heatmap can be used to visualize the copy number profiles of the dataset annotated with the subclonal information: plotHeatmap(tumor, label = &#39;subclones&#39;) ## Plotting Heatmap. Integer copy number heatmaps can be plotted with plotHeatmap() and the argument assay = 'integer', importantly the integer matrix must be in the 'integer' slot. plotHeatmap(tumor, assay = &#39;integer&#39;) ## Plotting Heatmap. Importantly, new information can be added to the metadata and used in conjunction with the plotting functions. The dataset in this example has some spatial information obtained from the macrodissection of the tissue. It is encoded in the sample name by the letter S followed by a number. We can extract that information and add it as an extra column to the metadata: colData(tumor)$spatial_info &lt;- str_extract(colData(tumor)$sample, &quot;L[0-9]&quot;) Once the information has been added, we can use it to color the heatmap points by their spatial information: plotUmap(tumor, label = &#39;spatial_info&#39;) ## Plotting Umap. ## Coloring by: spatial_info. It is also possible to annotate the heatmap with that information: The ‘label’ argument for plotHeatmap() can add as many annotations as specified by the user as long as they are elements in colData() of the CopyKit object. plotHeatmap(tumor, label = c(&quot;spatial_info&quot;, &quot;subclones&quot;)) ## Plotting Heatmap. If calcInteger() was performed, it is possible to visualize how much the copy number calls deviate from the expected integer states by using plotHeatmap() with the argument rounding_error set to TRUE plotHeatmap(tumor, label = &#39;subclones&#39;, assay = &#39;integer&#39;, rounding_error = TRUE) ## Plotting Heatmap. 6.10 calcConsensus() Consensus sequences can help visualize the different segments across the groups of cells. A consensus sequence can be calculated in CopyKit with the function calcConsensus() tumor &lt;- calcConsensus(tumor) plotHeatmap() can also plot consensus heatmap of the CopyKit object: plotHeatmap(tumor, consensus = TRUE, label = &#39;subclones&#39;) ## Plotting Heatmap. ## Warning: The input is a data frame, convert it to the matrix. By default calcConsensus() uses the subclones information to calculate a consensus for each subclone. Importantly, any element of the colData() can be used to calculate the consensus. tumor &lt;- calcConsensus(tumor, consensus_by = &quot;spatial_info&quot;) plotHeatmap(tumor, consensus = TRUE, label = &#39;spatial_info&#39;) ## Plotting Heatmap. ## Warning: The input is a data frame, convert it to the matrix. Note: Consensus matrices can be calculated from the integer assay. Importantly, the integer matrix must be in the assay(scCNA, 'integer') slot. Check calcInteger() for more info. tumor &lt;- calcConsensus(tumor, consensus_by = &#39;subclones&#39;, assay = &#39;integer&#39;) 6.11 plotConsensusLine() To make it easier to compare the differences among subclones, plotConsensusLine() opens an app where the consensus sequences are plotted as lines and a checkbox can be used to add overlays of the sequences. Making it easier to determine the differences between regions. plotConsensusLine(tumor) 6.12 plotGeneCopy() It might be of interest to check for the copy number states across all the samples for different genes. That can be done with plotGeneCopy() in two different geoms: “swarm” (default) or “violin.” As with other plot functions, points can be colored with the argument ‘label.’ plotGeneCopy(tumor, genes = c(&quot;CDKN2A&quot;, &quot;FGFR1&quot;, &quot;TP53&quot;, &quot;PTEN&quot;, &quot;MYC&quot;, &quot;CDKN1A&quot;, &quot;MDM2&quot;, &quot;AURKA&quot;, &quot;PIK3CA&quot;, &quot;CCND1&quot;, &quot;KRAS&quot;), label = &#39;spatial_info&#39;) ## Coloring by: spatial_info It is also possible to visualize the integer data as a frequency barplot for each gene: plotGeneCopy(tumor, genes = c(&quot;CDKN2A&quot;, &quot;FGFR1&quot;, &quot;TP53&quot;, &quot;PTEN&quot;, &quot;MYC&quot;, &quot;CDKN1A&quot;, &quot;MDM2&quot;, &quot;AURKA&quot;, &quot;PIK3CA&quot;, &quot;CCND1&quot;, &quot;KRAS&quot;), geom = &#39;barplot&#39;, assay = &#39;integer&#39;) "],["session-info.html", "7 Session Info", " 7 Session Info sessionInfo() ## R version 4.1.0 (2021-05-18) ## Platform: x86_64-pc-linux-gnu (64-bit) ## Running under: Ubuntu 20.04.2 LTS ## ## Matrix products: default ## BLAS/LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.8.so ## ## locale: ## [1] LC_CTYPE=en_US.UTF-8 LC_NUMERIC=C LC_TIME=en_US.UTF-8 ## [4] LC_COLLATE=en_US.UTF-8 LC_MONETARY=en_US.UTF-8 LC_MESSAGES=C ## [7] LC_PAPER=en_US.UTF-8 LC_NAME=C LC_ADDRESS=C ## [10] LC_TELEPHONE=C LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C ## ## attached base packages: ## [1] parallel stats4 stats graphics grDevices utils datasets methods base ## ## other attached packages: ## [1] devtools_2.4.2 usethis_2.0.1 stringr_1.4.0 ## [4] dplyr_1.0.7 copykit_0.0.0.9021 BiocParallel_1.26.1 ## [7] bookdown_0.22 SingleCellExperiment_1.14.1 SummarizedExperiment_1.22.0 ## [10] Biobase_2.52.0 GenomicRanges_1.44.0 GenomeInfoDb_1.28.1 ## [13] IRanges_2.26.0 S4Vectors_0.30.0 BiocGenerics_0.38.0 ## [16] MatrixGenerics_1.4.0 matrixStats_0.60.0 ## ## loaded via a namespace (and not attached): ## [1] utf8_1.2.1 reticulate_1.20 tidyselect_1.1.1 ## [4] grid_4.1.0 munsell_0.5.0 ScaledMatrix_1.0.0 ## [7] codetools_0.2-18 statmod_1.4.36 scran_1.20.1 ## [10] miniUI_0.1.1.1 withr_2.4.2 colorspace_2.0-2 ## [13] highr_0.9 knitr_1.33 rstudioapi_0.13 ## [16] robustbase_0.93-8 Rsubread_2.6.4 labeling_0.4.2 ## [19] GenomeInfoDbData_1.2.6 farver_2.1.0 rprojroot_2.0.2 ## [22] vctrs_0.3.8 treeio_1.16.1 generics_0.1.0 ## [25] xfun_0.24 fastcluster_1.2.3 diptest_0.76-0 ## [28] R6_2.5.0 doParallel_1.0.16 ggbeeswarm_0.6.0 ## [31] clue_0.3-59 rsvd_1.0.5 locfit_1.5-9.4 ## [34] pals_1.7 flexmix_2.3-17 bitops_1.0-7 ## [37] cachem_1.0.5 DelayedArray_0.18.0 assertthat_0.2.1 ## [40] promises_1.2.0.1 scales_1.1.1 nnet_7.3-16 ## [43] beeswarm_0.4.0 gtable_0.3.0 beachmat_2.8.0 ## [46] Cairo_1.5-12.2 processx_3.5.2 rlang_0.4.11 ## [49] GlobalOptions_0.1.2 splines_4.1.0 lazyeval_0.2.2 ## [52] dichromat_2.0-0 BiocManager_1.30.16 yaml_2.2.1 ## [55] httpuv_1.6.1 tools_4.1.0 ggplot2_3.3.5 ## [58] ellipsis_0.3.2 jquerylib_0.1.4 RColorBrewer_1.1-2 ## [61] DNAcopy_1.66.0 sessioninfo_1.1.1 Rcpp_1.0.7 ## [64] sparseMatrixStats_1.4.0 zlibbioc_1.38.0 purrr_0.3.4 ## [67] RCurl_1.98-1.3 ps_1.6.0 prettyunits_1.1.1 ## [70] dbscan_1.1-8 GetoptLong_1.0.5 viridis_0.6.1 ## [73] cowplot_1.1.1 cluster_2.1.2 fs_1.5.0 ## [76] magrittr_2.0.1 RSpectra_0.16-0 magick_2.7.2 ## [79] data.table_1.14.0 circlize_0.4.13 amap_0.8-18 ## [82] ggnewscale_0.4.5 pkgload_1.2.1 patchwork_1.1.1 ## [85] mime_0.11 evaluate_0.14 xtable_1.8-4 ## [88] mclust_5.4.7 gridExtra_2.3 shape_1.4.6 ## [91] testthat_3.0.4 compiler_4.1.0 tibble_3.1.2 ## [94] maps_3.3.0 crayon_1.4.1 htmltools_0.5.1.1 ## [97] mgcv_1.8-36 segmented_1.3-4 later_1.2.0 ## [100] tidyr_1.1.3 aplot_0.0.6 lubridate_1.7.10 ## [103] DBI_1.1.1 ComplexHeatmap_2.8.0 MASS_7.3-54 ## [106] fpc_2.2-9 boot_1.3-28 leidenbase_0.1.3 ## [109] Matrix_1.3-4 cli_2.5.0 metapod_1.0.0 ## [112] igraph_1.2.6 forcats_0.5.1 pkgconfig_2.0.3 ## [115] rvcheck_0.1.8 scuttle_1.2.0 foreach_1.5.1 ## [118] ggtree_3.0.2 vipor_0.4.5 bslib_0.2.5.1 ## [121] dqrng_0.3.0 XVector_0.32.0 snakecase_0.11.0 ## [124] callr_3.7.0 digest_0.6.27 janitor_2.1.0 ## [127] rmarkdown_2.9 leiden_0.3.8 tidytree_0.3.4 ## [130] uwot_0.1.10 edgeR_3.34.0 DelayedMatrixStats_1.14.0 ## [133] kernlab_0.9-29 shiny_1.6.0 gtools_3.9.2 ## [136] modeltools_0.2-23 rjson_0.2.20 lifecycle_1.0.0 ## [139] nlme_3.1-152 jsonlite_1.7.2 BiocNeighbors_1.10.0 ## [142] mapproj_1.2.7 desc_1.3.0 viridisLite_0.4.0 ## [145] limma_3.48.1 fansi_0.5.0 pillar_1.6.1 ## [148] lattice_0.20-44 fastmap_1.1.0 DEoptimR_1.0-9 ## [151] pkgbuild_1.2.0 survival_3.2-11 remotes_2.4.0 ## [154] glue_1.4.2 FNN_1.1.3 png_0.1-7 ## [157] prabclus_2.3-2 iterators_1.0.13 bluster_1.2.1 ## [160] sass_0.4.0 class_7.3-19 stringi_1.7.3 ## [163] mixtools_1.2.0 BiocSingular_1.8.1 memoise_2.0.0 ## [166] irlba_2.3.3 ape_5.5 "]]
