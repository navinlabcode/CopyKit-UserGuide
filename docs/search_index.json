[["index.html", "CopyKit User Guide 1 Introduction", " CopyKit User Guide Darlan Conterno Minussi Last revised: 2022-01-17 1 Introduction CopyKit provides a suite of tools for pre-processing, quality control, analysis, and visualization of single cell whole genome DNA sequencing datasets. The following chapters will cover each module in detail. Generated with CopyKit version: packageVersion(&quot;copykit&quot;) ## [1] &#39;0.0.0.9034&#39; "],["parallelization.html", "2 Parallelization", " 2 Parallelization Whenever possible, CopyKit uses the BiocParallel framework. Running parallel processes is highly recommended to speed up CopyKit calculations. Make sure to read the BiocParallel vignette to choose the best parameters for your machine and OS. Use BiocParallel::register() function to register the number of workers (threads) desired. To visually monitor the progress, you can use the argument progressbar to obtain a progress bar. library(BiocParallel) register(MulticoreParam(progressbar = T, workers = 100), default = T) Confirm parameters: BiocParallel::bpparam() ## class: MulticoreParam ## bpisup: FALSE; bpnworkers: 124; bptasks: 0; bpjobname: BPJOB ## bplog: FALSE; bpthreshold: INFO; bpstopOnError: TRUE ## bpRNGseed: ; bptimeout: 2592000; bpprogressbar: FALSE ## bpexportglobals: TRUE; bpforceGC: TRUE ## bplogdir: NA ## bpresultdir: NA ## cluster type: FORK Note about plotHeatmap() function parallelization: plotHeatmap() uses a different framework and requires the argument n_threads to set the number of threads when in use with the argument order_cells = hclust. This is to speed up the calculation of a distance matrix. Using more threads when ordering the heatmap with hclust will significantly speed up the plotting of the heatmap. See example in plotHeatmap help. "],["quick-start.html", "3 Quick-Start", " 3 Quick-Start This section provides a basic CopyKit workflow. # Load library library(copykit) # Run pre-processing module tumor &lt;- runVarbin(&quot;/path/to/marked/bam/files/&quot;, remove_Y = TRUE) # Mark euploid cells if they exist tumor &lt;- findAneuploidCells(tumor) # Mark low-quality cells for filtering tumor &lt;- findOutliers(tumor) # Visualize cells labeled by filter and aneuploid status plotHeatmap(tumor, label = c(&#39;outlier&#39;, &#39;is_aneuploid&#39;), row_split = &#39;outlier&#39;) # Remove cells marked as low-quality and/or aneuploid from the copykit object tumor &lt;- tumor[,SummarizedExperiment::colData(tumor)$outlier == FALSE] tumor &lt;- tumor[,SummarizedExperiment::colData(tumor)$is_aneuploid == TRUE] # Create a umap embedding tumor &lt;- runUmap(tumor) # Search for the K value that maximizes jaccard similarity for clustering of subclones # Plot the results # This step is optional. A fixed K value can be provided later to findClusters() tumor &lt;- findSuggestedK(tumor) plotSuggestedK(tumor) # Find clusters of similar copy number profiles and plot the results # If no k_subclones value is provided, automatically detect it from findSuggestedK() tumor &lt;- findClusters(tumor) plotUmap(tumor, label = &#39;subclones&#39;) # Calculate consensus profiles for each subclone, # and order cells by cluster for visualization with plotHeatmap tumor &lt;- calcConsensus(tumor) tumor &lt;- runConsensusPhylo(tumor) # Plot a copy number heatmap with clustering annotation plotHeatmap(tumor, label = &#39;subclones&#39;) The following sections explain all functions in detail. "],["pre-processing.html", "4 Pre-processing 4.1 From BAM files", " 4 Pre-processing CopyKit’s pre-processing module workhorse is runVarbin() runVarbin() is a wrapper for a series of functions that perform three main processes: Binning and read counting from the .bam files Applying a variance stabilization transformation to the bin counts Piece-wise segmentating stabilized bin counts We load CopyKit with the library() function. library(copykit) ## Loading required package: SingleCellExperiment ## Loading required package: SummarizedExperiment ## Loading required package: MatrixGenerics ## Loading required package: matrixStats ## ## Attaching package: &#39;MatrixGenerics&#39; ## The following objects are masked from &#39;package:matrixStats&#39;: ## ## colAlls, colAnyNAs, colAnys, colAvgsPerRowSet, colCollapse, colCounts, colCummaxs, ## colCummins, colCumprods, colCumsums, colDiffs, colIQRDiffs, colIQRs, colLogSumExps, ## colMadDiffs, colMads, colMaxs, colMeans2, colMedians, colMins, colOrderStats, colProds, ## colQuantiles, colRanges, colRanks, colSdDiffs, colSds, colSums2, colTabulates, colVarDiffs, ## colVars, colWeightedMads, colWeightedMeans, colWeightedMedians, colWeightedSds, ## colWeightedVars, rowAlls, rowAnyNAs, rowAnys, rowAvgsPerColSet, rowCollapse, rowCounts, ## rowCummaxs, rowCummins, rowCumprods, rowCumsums, rowDiffs, rowIQRDiffs, rowIQRs, ## rowLogSumExps, rowMadDiffs, rowMads, rowMaxs, rowMeans2, rowMedians, rowMins, rowOrderStats, ## rowProds, rowQuantiles, rowRanges, rowRanks, rowSdDiffs, rowSds, rowSums2, rowTabulates, ## rowVarDiffs, rowVars, rowWeightedMads, rowWeightedMeans, rowWeightedMedians, rowWeightedSds, ## rowWeightedVars ## Loading required package: GenomicRanges ## Loading required package: stats4 ## Loading required package: BiocGenerics ## ## Attaching package: &#39;BiocGenerics&#39; ## The following objects are masked from &#39;package:stats&#39;: ## ## IQR, mad, sd, var, xtabs ## The following objects are masked from &#39;package:base&#39;: ## ## anyDuplicated, append, as.data.frame, basename, cbind, colnames, dirname, do.call, ## duplicated, eval, evalq, Filter, Find, get, grep, grepl, intersect, is.unsorted, lapply, Map, ## mapply, match, mget, order, paste, pmax, pmax.int, pmin, pmin.int, Position, rank, rbind, ## Reduce, rownames, sapply, setdiff, sort, table, tapply, union, unique, unsplit, which.max, ## which.min ## Loading required package: S4Vectors ## ## Attaching package: &#39;S4Vectors&#39; ## The following objects are masked from &#39;package:base&#39;: ## ## expand.grid, I, unname ## Loading required package: IRanges ## Loading required package: GenomeInfoDb ## Loading required package: Biobase ## Welcome to Bioconductor ## ## Vignettes contain introductory material; view with &#39;browseVignettes()&#39;. To cite Bioconductor, ## see &#39;citation(&quot;Biobase&quot;)&#39;, and for packages &#39;citation(&quot;pkgname&quot;)&#39;. ## ## Attaching package: &#39;Biobase&#39; ## The following object is masked from &#39;package:MatrixGenerics&#39;: ## ## rowMedians ## The following objects are masked from &#39;package:matrixStats&#39;: ## ## anyMissing, rowMedians ## Loading required package: Rsubread ## Loading required package: DNAcopy NOTE: If the BiocParallel framework was registered, CopyKit functions will, whenever possible, run in parallel. For more information check the parallelization section. 4.1 From BAM files 4.1.1 runVarbin() The input for runVarbin() is the path of the folder containing your marked duplicate .bam files. The runVarbin() function counts the number of reads in each genomic bin according to the variable binning method - Learn More! (Navin et al. 2011; Baslan et al. 2012; Gao et al. 2016). To help users obtain marked duplicate .bam files from .fastq files we provide a snakemake pipeline here.This pipeline can be adapted as per users’ needs. NOTE: Reads must be aligned to the same genome assembly used within CopyKit. The runVarbin() function requires an argument specifying the path to the .bam files: An optional second argument remove_Y provides a convenient shortcut to exclude chromosome Y from the dataset. tumor &lt;- runVarbin(&quot;~/path/to/bam/files/&quot;, remove_Y = TRUE) ## Counting reads for genome hg38 and resolution: 200kb ## 34 bam files had less than 10 mean bincounts and were removed. ## Performing GC correction. ## Smoothing bin counts. ## Running segmentation algorithm: CBS for genome hg38 ## Merging levels. ## Done. By default, runVarbin() uses the hg38 genome assembly and a 220kb bin resolution. Both options can be customized with the arguments genome or resolution. (See ?runVarbin() for more details). If bam files originate from paired end sequencing, make sure to set the argument is_paired_end to true: tumor &lt;- runVarbin(&quot;~/path/to/bam/files/&quot;, remove_Y = TRUE, is_paired_end = TRUE) By default, runVarbin() uses the hg38 genome assembly and a resolution of 220kb. Both options can be customized with the arguments genome or resolution (see ?runVarbin()). The resulting object is the CopyKit object. tumor ## class: CopyKit ## dim: 11268 1502 ## metadata(3): genome resolution vst ## assays(6): bincounts ft ... ratios logr ## rownames(11268): 1 2 ... 11267 11268 ## rowData names(3): gc_content abspos arm ## colnames(1502): PMTC6LiverC100DL1S2_S100_L001_R1_001 PMTC6LiverC100DL1S6_S484_L002_R1_001 ... ## PMTC6LiverC9DL1S5_S393_L002_R1_001 PMTC6LiverC9DL6L7S1_S1161_L004_R1_001 ## colData names(9): sample reads_assigned_bins ... reads_total percentage_duplicates ## reducedDimNames(0): ## mainExpName: NULL ## altExpNames(0): ## rowRanges has: 11268 ranges ## Phylo: Phylogenetic tree with 0 tips and nodes ## consensus dim: 0 0 CopyKit object classes inherit from the SingleCellExperiment class. Each column represents a single cell and each row represents a bin. The read counts for each bin are stored in the bincounts assay, which can be accessed with bincounts(). head(bincounts(tumor)[,1:5]) ## # A tibble: 6 × 5 ## PMTC6LiverC100DL1S2_S100_L001_R1_001 PMTC6LiverC100DL… PMTC6LiverC100DL… PMTC6LiverC100DL… PMTC6LiverC101D… ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 37.1 10.3 44.5 44.2 38.6 ## 2 28.8 12.8 53.1 52.0 31.4 ## 3 34.8 9.03 50.4 47.3 31.9 ## 4 24.3 14.2 34.9 35.5 36.9 ## 5 30.8 9.18 55.8 37.1 29.2 ## 6 29.3 5.88 43.0 43.1 38.3 One issue with bin counts is they are a mixture of Negative Binomial distributions with increased variance at higher counts. To address this issue, CopyKit performs a variance stabilization transformation (VST) of the count matrix using the Freeman-Tukey transformation. The resulting transformation is stored within the ft assay, which can be accessed with assay(): head(assay(tumor, &#39;ft&#39;)[,1:5]) ## PMTC6LiverC100DL1S2_S100_L001_R1_001 PMTC6LiverC100DL1S6_S484_L002_R1_001 ## 1 12.258603 6.558716 ## 2 10.832889 7.300770 ## 3 11.880779 6.172013 ## 4 9.951377 7.674830 ## 5 11.181771 6.220463 ## 6 10.921155 5.047847 ## PMTC6LiverC100DL4L5S1_S868_L003_R1_001 PMTC6LiverC100DL6L7S3_S1252_L004_R1_001 ## 1 13.42067 13.36691 ## 2 14.63815 14.48431 ## 3 14.27288 13.82443 ## 4 11.89424 12.00304 ## 5 15.01185 12.26513 ## 6 13.19827 13.20130 ## PMTC6LiverC101DL1S2_S101_L001_R1_001 ## 1 12.50574 ## 2 11.30275 ## 3 11.37859 ## 4 12.23737 ## 5 10.90282 ## 6 12.46409 Lastly, we perform segmentation to fit piecewise constant functions to the genome-ordered bin counts. The resulting segment means can be used to infer copy number states across the different genomic regions. The segmentation method is chosen with the argument method to runVarbin(). Currently available methods are: 4.1.1.1 CBS {DNACopy} By default, CopyKit uses Circular Binary Segmentation (CBS) - Learn More! - from the DNAcopy package to perform segmentation of each chromosome arm. The runVarbin() function accepts the argument alpha which controls the significance levels required to accept change-points. 4.1.1.2 multipcf {copynumber} A second segmentation option is the Multi-sample Piecewise Constant Fit (multipcf) segmentation from the package copynumber. The multipcf function differs from CBS by performing a joint segmentation of the samples, resulting in common breakpoints to all samples. The resulting information from segmentation is stored within the CopyKit object into two different assays: ratios and segment_ratios. Learn More! They can be accessed with the helper function ratios() and segment_ratios() head(ratios(tumor)[,1:5]) ## PMTC6LiverC100DL1S2_S100_L001_R1_001 PMTC6LiverC100DL1S6_S484_L002_R1_001 ## 1 1.11 0.94 ## 2 0.92 1.11 ## 3 1.06 0.85 ## 4 0.81 1.20 ## 5 0.97 0.86 ## 6 0.93 0.61 ## PMTC6LiverC100DL4L5S1_S868_L003_R1_001 PMTC6LiverC100DL6L7S3_S1252_L004_R1_001 ## 1 0.96 1.05 ## 2 1.09 1.18 ## 3 1.05 1.10 ## 4 0.80 0.90 ## 5 1.13 0.93 ## 6 0.94 1.03 ## PMTC6LiverC101DL1S2_S101_L001_R1_001 ## 1 1.03 ## 2 0.88 ## 3 0.89 ## 4 1.00 ## 5 0.84 ## 6 1.02 head(segment_ratios(tumor)[,1:5]) ## PMTC6LiverC100DL1S2_S100_L001_R1_001 PMTC6LiverC100DL1S6_S484_L002_R1_001 ## 1 1 1 ## 2 1 1 ## 3 1 1 ## 4 1 1 ## 5 1 1 ## 6 1 1 ## PMTC6LiverC100DL4L5S1_S868_L003_R1_001 PMTC6LiverC100DL6L7S3_S1252_L004_R1_001 ## 1 1 1.02 ## 2 1 1.02 ## 3 1 1.02 ## 4 1 1.02 ## 5 1 1.02 ## 6 1 1.02 ## PMTC6LiverC101DL1S2_S101_L001_R1_001 ## 1 1 ## 2 1 ## 3 1 ## 4 1 ## 5 1 ## 6 1 4.1.2 runVarbin() modules The following sections describe the functions wrapped by runVarbin(). Important: If you started from runVarbin() you do not need to run the following functions. The details of these functions are provided to facilitate running modules with different conditions without requiring you to re-running runVarbin(). 4.1.2.1 runCountReads() runCountReads() counts the reads into bins, smooth bincounts, and perform GC correction of the counts - Learn More!. The genome argument defines the genome assembly (“hg38,” “hg19”). The resolution argument defines the size of the variable bins (“50kb,” “100kb,” “175kb,” “200kb,” “250kb,” “500kb,” “1Mb,” “2.5Mb”). The argument remove_Y provides a convenient shortcut to exclude chromosome Y from the dataset. 4.1.2.2 runVst() runVst() performs variance stabilization transformation of the bin counts The available transformations are freeman-tukey (‘ft’) or ‘log.’ 4.1.2.3 runSegmentation() runSegmentation() runs the segmentation algorithm of choice (‘CBS’ or ‘multipcf’), followed by merging consecutive segments whose change does not reach the significance threshold Learn More!. 4.1.2.4 logNorm() logNorm() performs a log transformation of the segment_ratios assay and stores into the logr assay. The logr assay is used downstream by functions such as runUmap(). 4.1.3 From external count data or user-defined scaffolds To use CopyKit’s downstream functions with processed datasets, we can create a CopyKit object meeting the following requirements: Either a bin count matrix where columns represent cells and rows are bins (to be stored in the bincounts assay) or a segment mean ratios matrix where columns represent cells and rows represent segment mean for each bin, an integer matrix of copy number calls can also be used at this step (to be stored in the segment_ratios assay). A GenomicRanges object with length equal to the number of bins from the cell assay matrix. As long as the length requirement is respected this allows user-defined scaffolds to be used within CopyKit. To construct the CopyKit object, the following example mock code can be used, if providing bincounts: obj &lt;- CopyKit(list(bincounts = cell_bincount_matrix), rowRanges = genomic_ranges_scaffold) If providing bincounts, the functions runVst(), runSegmentation(), and logNorm() can be used to continue with the analysis. To obtain variance stabilized counts, and segment ratio means. If providing segment mean ratios: obj &lt;- CopyKit(list(segment_ratios = cell_bincount_matrix), rowRanges = genomic_ranges_scaffold) The resulting object can then be passed on to the Quality Control and Analysis modules of CopyKit. Furthermore, it is useful for downstream functions to add the genome assembly used on the dataset. metadata(obj)$genome &lt;- &quot;hg38&quot; NOTE: If no bincount matrix is provided, functions that require a matrix of bincounts, such as runMetrics() can’t be used with this object. "],["qc-module.html", "5 QC module 5.1 runMetrics() 5.2 findAneuploidCells() 5.3 findOutliers()", " 5 QC module CopyKit Quality Control Module consists of 3 main functions: runMetrics() findOutliers() findAneuploidCells(). 5.1 runMetrics() runMetrics() adds basic quality control information to colData. It returns sample-wise metrics of overdispersion and breakpoint counts. tumor &lt;- runMetrics(tumor) ## Calculating overdispersion. ## Counting breakpoints. ## Done. The resulting information can be viewed with: colData(tumor) ## DataFrame with 1502 rows and 11 columns ## sample reads_assigned_bins reads_unmapped ## &lt;character&gt; &lt;integer&gt; &lt;integer&gt; ## PMTC6LiverC100DL1S2_S100_L001_R1_001 PMTC6LiverC100DL1S2_.. 362665 30250 ## PMTC6LiverC100DL1S6_S484_L002_R1_001 PMTC6LiverC100DL1S6_.. 130570 22260 ## PMTC6LiverC100DL4L5S1_S868_L003_R1_001 PMTC6LiverC100DL4L5S.. 536017 30942 ## PMTC6LiverC100DL6L7S3_S1252_L004_R1_001 PMTC6LiverC100DL6L7S.. 467002 28239 ## PMTC6LiverC101DL1S2_S101_L001_R1_001 PMTC6LiverC101DL1S2_.. 423654 28756 ## ... ... ... ... ## PMTC6LiverC99DL4L5S1_S867_L003_R1_001 PMTC6LiverC99DL4L5S1.. 460498 37945 ## PMTC6LiverC99DL6L7S3_S1251_L004_R1_001 PMTC6LiverC99DL6L7S3.. 306486 28090 ## PMTC6LiverC9DL1S1_S9_L001_R1_001 PMTC6LiverC9DL1S1_S9.. 274402 38326 ## PMTC6LiverC9DL1S5_S393_L002_R1_001 PMTC6LiverC9DL1S5_S3.. 465001 34111 ## PMTC6LiverC9DL6L7S1_S1161_L004_R1_001 PMTC6LiverC9DL6L7S1_.. 336559 38814 ## reads_duplicates reads_multimapped reads_unassigned reads_ambiguous ## &lt;integer&gt; &lt;integer&gt; &lt;integer&gt; &lt;integer&gt; ## PMTC6LiverC100DL1S2_S100_L001_R1_001 34883 0 75555 90 ## PMTC6LiverC100DL1S6_S484_L002_R1_001 12657 0 28651 27 ## PMTC6LiverC100DL4L5S1_S868_L003_R1_001 58222 0 110352 103 ## PMTC6LiverC100DL6L7S3_S1252_L004_R1_001 53055 0 98560 91 ## PMTC6LiverC101DL1S2_S101_L001_R1_001 43008 0 87786 76 ## ... ... ... ... ... ## PMTC6LiverC99DL4L5S1_S867_L003_R1_001 54159 0 96735 86 ## PMTC6LiverC99DL6L7S3_S1251_L004_R1_001 36534 0 64866 56 ## PMTC6LiverC9DL1S1_S9_L001_R1_001 25527 0 59107 54 ## PMTC6LiverC9DL1S5_S393_L002_R1_001 48055 0 96126 109 ## PMTC6LiverC9DL6L7S1_S1161_L004_R1_001 37898 0 71998 60 ## reads_total percentage_duplicates overdispersion breakpoint_count ## &lt;numeric&gt; &lt;numeric&gt; &lt;numeric&gt; &lt;numeric&gt; ## PMTC6LiverC100DL1S2_S100_L001_R1_001 503443 0.069 0.00262992 0 ## PMTC6LiverC100DL1S6_S484_L002_R1_001 194165 0.065 0.01564945 0 ## PMTC6LiverC100DL4L5S1_S868_L003_R1_001 735636 0.079 0.00302844 0 ## PMTC6LiverC100DL6L7S3_S1252_L004_R1_001 646947 0.082 0.00379236 0 ## PMTC6LiverC101DL1S2_S101_L001_R1_001 583280 0.074 0.00674672 0 ## ... ... ... ... ... ## PMTC6LiverC99DL4L5S1_S867_L003_R1_001 649423 0.083 0.00195059 0 ## PMTC6LiverC99DL6L7S3_S1251_L004_R1_001 436032 0.084 0.00362179 0 ## PMTC6LiverC9DL1S1_S9_L001_R1_001 397416 0.064 0.00406539 0 ## PMTC6LiverC9DL1S5_S393_L002_R1_001 643402 0.075 0.00276767 0 ## PMTC6LiverC9DL6L7S1_S1161_L004_R1_001 485329 0.078 0.00231466 0 5.2 findAneuploidCells() Datasets may contain euploid cells mixed with the aneuploidy cells. To detect euploid cells findAneuploidCells() calculates the sample-wise coefficient of variation from the segment ratio means. The expected coefficient of variation for euploid cells N(0, 0.01) is simulated for x data points, where x is equal to the number of cells within the dataset. An expectation-maximization algorithm is used to fit a mixture of gaussian distributions to the coefficient of variation from the samples together with the simulated datasets. The distribution containing the simulated dataset is inferred to be the euploid distribution. Samples that group with the inferred euploid distribution and present coefficient of variation smaller than 5 standard deviations from the mean euploid distribution are classified as euploid samples. The threshold can be changed from the automatic detection to a custom threshold with the argument resolution. For example, by setting a threshold = 0.1, findAneuploidCells will mark as euploid all cells with a coefficient of variation less or equal than 0.1. tumor &lt;- findAneuploidCells(tumor) ## number of iterations= 19 ## Copykit detected 612 that are possibly normal cells using a resolution of: 0.054 ## Added information to colData(CopyKit). The results from findAneuploidCells() are stored within the colData in the column is_aneuploid. We can visualize the results with plotHeatmap(): plotHeatmap(tumor, label = &#39;is_aneuploid&#39;, row_split = &#39;is_aneuploid&#39;, n_threads = 40) ## Ordering by consensus requires cluster information. ## Switching to hclust. ## No distance matrix detected in the scCNA object. ## Calculating distance matrix with metric: euclidean ## Using 40 cores. ## Access distance matrix with copykit::distMat() ## Done. ## Plotting Heatmap. The object is subsetted in the same way as with any R object, to keep only the aneuploid cells. tumor &lt;- tumor[,colData(tumor)$is_aneuploid == TRUE] 5.3 findOutliers() findOutliers() annotates low-quality cells according to a defined resolution threshold. To detect low-quality samples, CopyKit calculates the Pearson correlation matrix of all samples from the segment ratio means. Next, we calculate a sample-wise mean of the correlation between a cell and its k-nearest-neighbors (default = 5). Cells in which the correlation value is lower than the defined threshold are classified as low-quality cells (default = 0.9). tumor &lt;- findOutliers(tumor) ## Calculating correlation matrix. ## Marked 101 cells as outliers. ## Adding information to metadata. Access with colData(scCNA). ## Done. The default correlation cutoff for filtering can be adjusted with the argument ‘resolution.’ For example, setting the resolution = 0.8 will mark all cells with a mean correlation smaller than 0.8 as low-quality cells. Higher resolution values will result in stricter filtering criterias. Results from findOutliers() are added to colData (column outlier) marking cells that can be removed or kept. We can check the results with plotHeatmap(). To make visualization easier, rows can also be split according to elements of colData with the argument row_split. plotHeatmap(tumor, label = &#39;outlier&#39;, row_split = &#39;outlier&#39;, n_threads = 40) ## Ordering by consensus requires cluster information. ## Switching to hclust. ## No distance matrix detected in the scCNA object. ## Calculating distance matrix with metric: euclidean ## Using 40 cores. ## Access distance matrix with copykit::distMat() ## Done. ## Plotting Heatmap. We remove the marked noise cells from the object with: tumor &lt;- tumor[,colData(tumor)$outlier == FALSE] The dataset should be ready to proceed with the analysis. "],["analysis-and-visualization-module.html", "6 Analysis and Visualization module 6.1 plotMetrics() 6.2 plotRatio() 6.3 runUmap() 6.4 plotUmap() 6.5 Clustering 6.6 runPhylo() 6.7 plotPhylo() 6.8 calcInteger() 6.9 plotHeatmap() 6.10 plotFreq() 6.11 calcConsensus() 6.12 plotConsensusLine() 6.13 plotGeneCopy() 6.14 plotAlluvial()", " 6 Analysis and Visualization module The analysis and visualization module from CopyKit work in synergy to help you analyze and assess the results. 6.1 plotMetrics() plotMetrics() can plot any information available within colData(). names(colData(tumor)) ## [1] &quot;sample&quot; &quot;reads_assigned_bins&quot; &quot;reads_unmapped&quot; &quot;reads_duplicates&quot; ## [5] &quot;reads_multimapped&quot; &quot;reads_unassigned&quot; &quot;reads_ambiguous&quot; &quot;reads_total&quot; ## [9] &quot;percentage_duplicates&quot; &quot;overdispersion&quot; &quot;breakpoint_count&quot; &quot;is_aneuploid&quot; ## [13] &quot;find_normal_cv&quot; &quot;cell_corr_value&quot; &quot;outlier&quot; colData information is provided to the argument metric. The argument label, if supplied, will color the points based on that information. plotMetrics(tumor, metric = c(&quot;overdispersion&quot;, &quot;breakpoint_count&quot;, &quot;reads_total&quot;, &quot;reads_duplicates&quot;, &quot;reads_assigned_bins&quot;, &quot;percentage_duplicates&quot;), label = &quot;percentage_duplicates&quot;) ## Coloring by: percentage_duplicates 6.2 plotRatio() It is important to visualize that the segmentation behaved as expected and closely follows the ratios. This helps to verify that the segmentation is correct and visually assess the data quality. Ratio plots are a great tool for this. plotRatio() has two different modes. When the input is the CopyKit object, an interactive app will open, allowing selection of which cell will be visualized. plotRatio(tumor) If a sample name is provided to plotRatio(), only the plot for the selected cell will be shown. plotRatio(tumor, &quot;PMTC6LiverC117AL4L5S1_S885_L003_R1_001&quot;) 6.3 runUmap() runUmap() generates a UMAP embedding. The resulting embedding is stored in the reducedDim slot. runUmap() is an important pre-processing step to the findClusters() feature. tumor &lt;- runUmap(tumor) ## Using assay: logr ## Embedding data with UMAP. Using seed 17 ## Access reduced dimensions slot with: SingleCellExperiment::reducedDim(scCNA, &#39;umap&#39;). ## Done. Additional arguments to control umap parameters can be passed on torunUmap() with the ‘…’ argument. The full list of additional arguments that can be passed on to uwot::umap with the ‘…’ argument can be seen in the uwot manual and a guide to their influence on clustering can be found in the umap webpage 6.4 plotUmap() plotUmap() can be used to visualize the reduced dimensional embedding. plotUmap can be colored by any element of the colData with the argument ‘label.’ plotUmap(tumor) ## Plotting Umap. An example on how to color the points by elements of colData is later shown in this guide. 6.5 Clustering findClusters() uses the reduced dimensional embedding resulting from runUmap() to perform clustering at two levels (superclones and subclones). When clustering for superclones findClusters() creates a graph representation of the reduced dimension embedding using a shared nearest neighbor algorithm (SNN). From this graph the connected components are extracted and, generally, represent high-level structures that share large copy number events. At a more fine-grained resolution, CopyKit can also be used to detect subclones. To do so, the umap embedding is used as the pre-processing step. Different clustering algorithms can be used to detect subclones: hdbscan (default) Leiden Louvain The hdbscan method is recommended and has beenp reviously successfully applied in the work from Laks et al. and Minussi et al.. 6.5.1 findSugestedK() To help with parametrization, CopyKit provides the helper function findSuggestedK(). The function findSuggestedK bootstraps clustering over a range of k values, and returns the value that maximizes the jaccard similarity. By default, the metric being maximized is median (argument metric). While findSuggestedK does not guarantee optimal clustering, it does provides a guide that maximizes cluster stability. tumor &lt;- findSuggestedK(tumor) ## Calculating jaccard similarity for k range: 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 ## ## Suggested k = 10 with median jaccard similarity of: 1 We can inspect the results of findSuggestedK() with plotSuggestedK(). The default geom plots a boxplot of each k assessed during the grid search. The red point inside each boxplot represents the mean jaccard similarity for a given k. plotSuggestedK(tumor) If the argument geom is set to tile, plotSuggestedK() plots a heatmap where each row is a detected subclone, each column is a k assessed during the grid search and the color represents the jaccard similarity for a given clone. Clones not detected in a given k are presented in gray. plotSuggestedK(tumor, geom = &#39;tile&#39;) It is also possible to visualize the relation between subclone sizes with the jaccard similarity setting geom to scatterplot plotSuggestedK(tumor, geom = &#39;scatterplot&#39;) ## `geom_smooth()` using formula &#39;y ~ x&#39; The suggested value is stored into the metadata and can be accessed at: S4Vectors::metadata(tumor)$suggestedK ## [1] 10 6.5.2 findClusters() To run findClusters() we can provide the CopyKit object to the function. tumor &lt;- findClusters(tumor) ## Using suggested k_subclones = 10 ## Finding clusters, using method: hdbscan ## Found 4 subclones. ## Done. If findSuggestedK() was run prior, and the argument ‘k_subclones’ is not provided, findClusters() will automatically use the value resulting from findSuggestedK() that was stored into the metadata: k values can be manually controlled with ‘k_superclones’ and ‘k_subclones.’ NOTE: k_superclones and k_subclones can be used concurrently. Only k_subclones is a mandatory field. For example (not run): tumor &lt;- findClusters(tumor, k_superclones = 30, k_subclones = 15) If the method used for clustering was hdbscan, it is possible that a subgroup of outliers is identified. Outliers are added to subgroup c0 and may be removed by subsetting the CopyKit object. Copykit will report if any cell was classified as c0 in an informative message after running findClusters() tumor &lt;- tumor[,colData(tumor)$subclones != &#39;c0&#39;] We can use different plotting functions to visualize clustering results. For example plotUmap() can be used with the argument ‘label’: plotUmap(tumor, label = &#39;subclones&#39;) ## Plotting Umap. ## Coloring by: subclones. 6.6 runPhylo() To run a phylogenetic analysis of cells’ copy number profiles, use the function runPhylo(). Available methods are Neighbor Joining and Balanced Minimum evolution. The resulting tree is stored within the CopyKit object in the phylo slot: tumor &lt;- runPhylo(tumor, metric = &#39;manhattan&#39;) ## Using ratio data... ## Calculating distance matrix ## Creating neighbor-joining tree. ## Access slot with copykit::phylo(scCNA). ## Done. 6.7 plotPhylo() To visualize the resulting phylogenetic trees from runPhylo() we can use the plotPhylo() function. plotPhylo(tumor) plotPhylo() can use any element of the colData to color the leaves of the tree. plotPhylo(tumor, label = &#39;subclones&#39;) 6.8 calcInteger() The true underlying copy number states for a given region of the genome are given in integer states. We can use the segment ratio means to make an inference of the copy number state for a given genomic region. Keep in mind that those are inferences and, as such, are subjected to errors of different sources, like erroneous inference or rounding errors. Segment ratio means can be scaled to integer values with calcInteger(). CopyKit supports different methods of calculating integer copy number profiles. To calculate computational ploidies, CopyKit adopts the scquantum package. To use scquantum just set the argument method to scquantum. tumor &lt;- calcInteger(tumor, method = &#39;scquantum&#39;) By setting the argument method to fixed, a fixed value of ploidy (generally determined using Flow Cytometry) will scale all cells. tumor &lt;- calcInteger(tumor, ploidy_value = 4.3) ## Scaling ratio values by ploidy value 4.3 Alternatively, if different ploidies are needed for different cells, a vector containing the ploidies can be passed on to calcInteger(), as long as it has an equal length and sample order as colData(). The integer values are stored in the slot integer that can be accessed with the function assay(). If the assay integer exists, plotRatio() will use it to plot the integer copy number values as a secondary axis. plotRatio(tumor, &quot;PMTC6LiverC117AL4L5S1_S885_L003_R1_001&quot;) 6.9 plotHeatmap() To visualize copy number profiles with a heatmap we can use plotHeatmap(). The heatmap can be annotated with elements of colData. To order subclones, one option is to calculate a consensus phylogeny, explained in later sections: tumor &lt;- calcConsensus(tumor) tumor &lt;- runConsensusPhylo(tumor) To plot the heatmap. plotHeatmap(tumor, label = &#39;subclones&#39;) ## Plotting Heatmap. Genes can be annotated to a heatmap in plotHeatmap() with the genes argument. The genes argument is a vector of gene HUGO symbols: plotHeatmap(tumor, label = &#39;subclones&#39;, genes = c(&quot;TP53&quot;, &quot;BRAF&quot;, &quot;MYC&quot;)) To plot integer copy number heatmaps pass the argument assay = 'integer', importantly the integer matrix must be in the 'integer'slot. plotHeatmap(tumor, assay = &#39;integer&#39;) ## Plotting Heatmap. New information can be added to colData() and used in conjunction with the plotting functions. The example dataset has macro-spatial information. The information is encoded in the sample name by the letter L followed by a number. We can extract that information and add it as an extra column to the metadata: colData(tumor)$spatial_info &lt;- stringr::str_extract(colData(tumor)$sample, &quot;L[0-9]&quot;) Once the information has been added, we can use it to color the umap by their spatial information: plotUmap(tumor, label = &#39;spatial_info&#39;) ## Plotting Umap. ## Coloring by: spatial_info. It is also possible to annotate the heatmap with that information: The ‘label’ argument for plotHeatmap() can add as many annotations as specified by the user as long as they are elements in colData() of the CopyKit object. plotHeatmap(tumor, label = c(&quot;spatial_info&quot;, &quot;subclones&quot;)) ## Plotting Heatmap. 6.10 plotFreq() Computing the frequencies of genomic gain or losses across the genome can be useful to visualize differences between groups. This can be done with plotFreq(). For every region of the genome, plotFreq() will calculate the frequency of gain or losses according to a threshold across all samples. The thresholds are controlled with the arguments low_threshold (values below will be counted as genomic losses) and high_threshold (values above will be counted as genomic gains). Ideally thresholds will be set according to the ploidy of the sample. For example, the sample presented throughout this documentation has a ploidy of approximately 4.3, therefore a gain or loss of one copy number for this sample should have a difference in the segment ratio value of 1/4.3 (~0.23). This way, we will set the thresholds accordingly to a difference of plus or minus 0.2 (leaving some room for error), compared to a segment ratio of 1. The argument assay can be provided to pass on the integer assay instead of the segment_ratios assay (adjust thresholds accordingly). Two geoms are available area or line. plotFreq(tumor, low_threshold = 0.8, high_threshold = 1.2) Group information can be set to any categorical element of the colData() and is provided with the argument label. plotFreq(tumor, low_threshold = 0.8, high_threshold = 1.2, label = &#39;subclones&#39;) 6.11 calcConsensus() Consensus sequences can help visualize the different segments across subclones. To calculate consensus matrices we can use calcConsensus(). tumor &lt;- calcConsensus(tumor) plotHeatmap() can plot a consensus heatmap: plotHeatmap(tumor, consensus = TRUE, label = &#39;subclones&#39;) ## Plotting Heatmap. plotHeatmap() can annotate the consensus heatmap with information from the metadata as long as label is the same as the information used to build the consensus matrix: plotHeatmap(tumor, consensus = TRUE, label = &#39;subclones&#39;, group = &#39;spatial_info&#39;) ## Plotting Heatmap. By default calcConsensus() uses the subclones information to calculate a consensus for each subclone. Any element of the colData() can be used to calculate the consensus. Note: Consensus matrices can be calculated from the integer assay. Importantly, the integer matrix must be in the assay(tumor, 'integer') slot. Check calcInteger() for more info. tumor &lt;- calcConsensus(tumor, consensus_by = &#39;subclones&#39;, assay = &#39;integer&#39;) 6.12 plotConsensusLine() To compare the differences among subclones, plotConsensusLine() opens an interactive app where the consensus sequences are plotted as lines. plotConsensusLine(tumor) 6.13 plotGeneCopy() To check copy number states across of genes we can use plotGeneCopy(). Two different geoms: “swarm” (default) or “violin” can be applied. As with other plotting functions, points can be colored with the argument ‘label.’ plotGeneCopy(tumor, genes = c(&quot;CDKN2A&quot;, &quot;FGFR1&quot;, &quot;TP53&quot;, &quot;PTEN&quot;, &quot;MYC&quot;, &quot;CDKN1A&quot;, &quot;MDM2&quot;, &quot;AURKA&quot;, &quot;PIK3CA&quot;, &quot;CCND1&quot;, &quot;KRAS&quot;), label = &#39;spatial_info&#39;) ## Coloring by: spatial_info A barplot geom is also provided to visualize the integer data as a frequency barplot for each gene: plotGeneCopy(tumor, genes = c(&quot;CDKN2A&quot;, &quot;FGFR1&quot;, &quot;TP53&quot;, &quot;PTEN&quot;, &quot;MYC&quot;, &quot;CDKN1A&quot;, &quot;MDM2&quot;, &quot;AURKA&quot;, &quot;PIK3CA&quot;, &quot;CCND1&quot;, &quot;KRAS&quot;), geom = &#39;barplot&#39;, assay = &#39;integer&#39;) 6.14 plotAlluvial() To visualize frequencies across elements of the metadata we can use plotAlluvial() plotAlluvial(tumor, label = c(&quot;subclones&quot;, &quot;spatial_info&quot;)) "],["learn-more.html", "7 Learn more 7.1 Copy Number data from short reads sequencing 7.2 Principle 7.3 VarBin 7.4 GC correction 7.5 Merge Levels 7.6 How do we infer copy numbers 7.7 Segmentation", " 7 Learn more This section is always expanding. If you have a contribution and would like to add explanations for a method related to copy number data, please submit a PR. Contributions are extremely welcomed! 7.1 Copy Number data from short reads sequencing 7.2 Principle To infer copy number data from short-read sequencing we count the number of reads that align to a particular region of the genome. Counter intuitively, we are not drawn to the individual nucleotides, but the regions of the genome in which the reads have aligned. 7.3 VarBin To perform the alignment of millions of reads in a reasonable time frame, aligners trade-off accuracy for speed. Furthermore, the genome is filled with repetitive and hard to map regions. As a consequence, errors produced during the process of alignment are known as mapping errors. Mapping errors may be a significant source of bias. Correct estimation of copy number gains or losses is dependent on accurate control of different biases. To infer copy number variations and account for sources of bias, different methods have been developed, including the Variable Binning method. The VarBin method accounts for mapping bias by partitioning the genome into bins of variable sizes. The guiding principle is, if we were to map a diploid genome to our scaffold, each bin will receive an equal number of reads. To construct the VarBin scaffolds, reads are simulated from a reference genome and mapped back. The reference genome is partitioned into bins of variable sizes, that receive an equal amount of reads. We can construct scaffolds of different resolutions. Higher resolutions will have smaller bin sizes and detect more ‘focal’ copy number events. The decision of which resolution to use is dependent on diverse factors. Those include the library complexity, number of multiplexed cells, sequencer output, among others. Generally, a target of 1M reads/cell, with a 10% PCR duplicate rate, is sufficient to generate high-quality copy number profiles for the 220kb scaffold. 7.4 GC correction GC-content can be a source of bias within the counts. Normalization of GC content is performed as follows: Both fragment counts and GC counts are binned to a bin-size of choice. A curve describing the conditional mean fragment count per GC value is estimated. The resulting GC curve determines a predicted count for each bin based on the bin’s GC. These predictions can be used directly to normalize the original signal, or as the rates for a heterogeneous Poisson model. Extracted from: Summarizing and correcting the GC content bias in high-throughput sequencing. Benjamini &amp; Speed Therefore, we smooth the signal using loess normalization. 7.5 Merge Levels After segmentation, some segments remain with small differences, generating spurious breakpoints that are unlikely to be real copy number events. To remove this effect we perform a Wilcoxon rank-sum test between the observed median across two segments. Segments that do not reach significance are merged. 7.6 How do we infer copy numbers We previously partitioned the reference genome into bins of variables size and performed the alignment of the reads to the bins, quantifying the number of reads contained in each bin. We can infer the relative copy number of a sample relative to the average number of reads of the sample. Therefore, we perform a sample-wise normalization of the bin counts by their mean. This way, a value of 1 corresponds to the average copy number of the sample, whereas higher values reflect amplified regions, and lower values represent genomic losses. The resulting matrix is known as the ratio matrix and it’s segmented counterpart is known as the segment ratios mean matrix. Importantly, with this normalization, we can’t immediately determine the integer copy number of a given segment. However several methods have been developed to infer the ploidy of a cell and its segments using short read sequencing. 7.7 Segmentation 7.7.1 CBS Circular Binary Segmentation (CBS) is a popular method of segmentation. From the help of DNAcopy package (see ?DNAcopy::segment): This function implements the circular binary segmentation (CBS) algorithm of Olshen and Venkatraman (2004). Given a set of genomic data, either continuous or binary, the algorithm recursively splits chromosomes into either two or three subsegments based on a maximum t-statistic. A reference distribution, used to decided whether or not to split, is estimated by permutation. Options are given to eliminate splits when the means of adjacent segments are not sufficiently far apart. Note that after the first split the α-levels of the tests for splitting are not unconditional. "],["session-info.html", "8 Session Info", " 8 Session Info sessionInfo() ## R version 4.1.1 (2021-08-10) ## Platform: x86_64-pc-linux-gnu (64-bit) ## Running under: Ubuntu 20.04.3 LTS ## ## Matrix products: default ## BLAS/LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.8.so ## ## locale: ## [1] LC_CTYPE=en_US.UTF-8 LC_NUMERIC=C LC_TIME=en_US.UTF-8 ## [4] LC_COLLATE=en_US.UTF-8 LC_MONETARY=en_US.UTF-8 LC_MESSAGES=C ## [7] LC_PAPER=en_US.UTF-8 LC_NAME=C LC_ADDRESS=C ## [10] LC_TELEPHONE=C LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C ## ## attached base packages: ## [1] stats4 stats graphics grDevices utils datasets methods base ## ## other attached packages: ## [1] copykit_0.0.0.9034 DNAcopy_1.68.0 Rsubread_2.8.1 ## [4] SingleCellExperiment_1.16.0 SummarizedExperiment_1.24.0 Biobase_2.54.0 ## [7] GenomicRanges_1.46.0 GenomeInfoDb_1.30.0 IRanges_2.28.0 ## [10] S4Vectors_0.32.2 BiocGenerics_0.40.0 MatrixGenerics_1.6.0 ## [13] matrixStats_0.61.0 BiocParallel_1.28.0 bookdown_0.24 ## ## loaded via a namespace (and not attached): ## [1] rappdirs_0.3.3 rtracklayer_1.54.0 prabclus_2.3-2 coda_0.19-4 ## [5] tidyr_1.1.4 ggplot2_3.3.5 clusterGeneration_1.3.7 bit64_4.0.5 ## [9] knitr_1.36 irlba_2.3.3 DelayedArray_0.20.0 KEGGREST_1.34.0 ## [13] RCurl_1.98-1.5 doParallel_1.0.16 generics_0.1.1 GenomicFeatures_1.46.1 ## [17] ScaledMatrix_1.2.0 cowplot_1.1.1 RSQLite_2.2.8 combinat_0.0-8 ## [21] bit_4.0.4 xml2_1.3.2 lubridate_1.8.0 httpuv_1.6.3 ## [25] assertthat_0.2.1 viridis_0.6.2 amap_0.8-18 xfun_0.28 ## [29] jquerylib_0.1.4 hms_1.1.1 evaluate_0.14 promises_1.2.0.1 ## [33] DEoptimR_1.0-9 fansi_0.5.0 restfulr_0.0.13 progress_1.2.2 ## [37] dbplyr_2.1.1 igraph_1.2.8 DBI_1.1.1 tmvnsim_1.0-2 ## [41] paletteer_1.4.0 purrr_0.3.4 ellipsis_0.3.2 RSpectra_0.16-0 ## [45] dplyr_1.0.7 ggnewscale_0.4.5 backports_1.3.0 biomaRt_2.50.0 ## [49] sparseMatrixStats_1.6.0 vctrs_0.3.8 ggalluvial_0.12.3 withr_2.4.3 ## [53] cachem_1.0.6 robustbase_0.93-9 GenomicAlignments_1.30.0 treeio_1.18.0 ## [57] prettyunits_1.1.1 scran_1.22.0 mclust_5.4.7 mnormt_2.0.2 ## [61] phytools_0.7-90 cluster_2.1.2 ape_5.5 segmented_1.3-4 ## [65] lazyeval_0.2.2 crayon_1.4.2 labeling_0.4.2 edgeR_3.36.0 ## [69] pkgconfig_2.0.3 vipor_0.4.5 nlme_3.1-153 nnet_7.3-16 ## [73] pals_1.7 rlang_0.4.12 diptest_0.76-0 lifecycle_1.0.1 ## [77] miniUI_0.1.1.1 filelock_1.0.2 dbscan_1.1-8 BiocFileCache_2.2.0 ## [81] rsvd_1.0.5 dichromat_2.0-0 Matrix_1.3-4 aplot_0.1.1 ## [85] phangorn_2.7.1 boot_1.3-28 beeswarm_0.4.0 GlobalOptions_0.1.2 ## [89] viridisLite_0.4.0 png_0.1-7 rjson_0.2.20 bitops_1.0-7 ## [93] Biostrings_2.62.0 blob_1.2.2 DelayedMatrixStats_1.16.0 shape_1.4.6 ## [97] stringr_1.4.0 gridGraphics_0.5-1 beachmat_2.10.0 scales_1.1.1 ## [101] memoise_2.0.0 magrittr_2.0.1 zlibbioc_1.40.0 compiler_4.1.1 ## [105] dqrng_0.3.0 BiocIO_1.4.0 RColorBrewer_1.1-2 plotrix_3.8-2 ## [109] clue_0.3-60 cli_3.1.0 Rsamtools_2.10.0 snakecase_0.11.0 ## [113] XVector_0.34.0 patchwork_1.1.1 mgcv_1.8-38 MASS_7.3-54 ## [117] tidyselect_1.1.1 stringi_1.7.5 forcats_0.5.1 highr_0.9 ## [121] purler_0.1.1 yaml_2.2.1 BiocSingular_1.10.0 locfit_1.5-9.4 ## [125] grid_4.1.1 sass_0.4.0 fastmatch_1.1-3 tools_4.1.1 ## [129] parallel_4.1.1 circlize_0.4.13 rstudioapi_0.13 bluster_1.4.0 ## [133] foreach_1.5.1 gridExtra_2.3 janitor_2.1.0 metapod_1.2.0 ## [137] farver_2.1.0 scatterplot3d_0.3-41 digest_0.6.28 FNN_1.1.3 ## [141] shiny_1.7.1 quadprog_1.5-8 fpc_2.2-9 Rcpp_1.0.7 ## [145] broom_0.7.10 scuttle_1.4.0 later_1.3.0 httr_1.4.2 ## [149] AnnotationDbi_1.56.1 ComplexHeatmap_2.10.0 kernlab_0.9-29 colorspace_2.0-2 ## [153] XML_3.99-0.8 reticulate_1.22 splines_4.1.1 uwot_0.1.10 ## [157] yulab.utils_0.0.4 statmod_1.4.36 rematch2_2.1.2 tidytree_0.3.5 ## [161] expm_0.999-6 aCGH_1.72.0 multtest_2.50.0 mapproj_1.2.7 ## [165] ggplotify_0.1.0 flexmix_2.3-17 xtable_1.8-4 jsonlite_1.7.2 ## [169] ggtree_3.2.0 modeltools_0.2-23 ggfun_0.0.4 R6_2.5.1 ## [173] pillar_1.6.4 htmltools_0.5.2 mime_0.12 glue_1.4.2 ## [177] fastmap_1.1.0 BiocNeighbors_1.12.0 class_7.3-19 codetools_0.2-18 ## [181] maps_3.4.0 utf8_1.2.2 bslib_0.3.1 lattice_0.20-45 ## [185] tibble_3.1.5 mixtools_1.2.0 numDeriv_2016.8-1.1 ggbeeswarm_0.6.0 ## [189] curl_4.3.2 leiden_0.3.9 gtools_3.9.2 magick_2.7.3 ## [193] survival_3.2-13 limma_3.50.0 rmarkdown_2.11 munsell_0.5.0 ## [197] GetoptLong_1.0.5 fastcluster_1.2.3 GenomeInfoDbData_1.2.7 iterators_1.0.13 ## [201] gtable_0.3.0 "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
